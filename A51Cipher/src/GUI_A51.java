
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nhanr
 */
public class GUI_A51 extends javax.swing.JFrame {

    public static String key = null;
    static final int REG_X_LENGTH = 19;
    static final int REG_Y_LENGTH = 22;
    static final int REG_Z_LENGTH = 23;
    int[] regX = new int[REG_X_LENGTH];
    int[] regY = new int[REG_Y_LENGTH];
    int[] regZ = new int[REG_Z_LENGTH];
    void loadRegisters(String key) {
	for (int i = 0; i < REG_X_LENGTH; i++)
	 regX[i] = Integer.parseInt(key.substring(i, i + 1));
	for (int i = 0; i < REG_Y_LENGTH; i++)
	 regY[i] = Integer.parseInt(key.substring(REG_X_LENGTH + i, REG_X_LENGTH + i + 1));
	for (int i = 0; i < REG_Z_LENGTH; i++)
	 regZ[i] = Integer.parseInt(key.substring(REG_X_LENGTH + REG_Y_LENGTH + i, REG_X_LENGTH +
		REG_Y_LENGTH + i + 1));
 }

 /**
	* If valid 64-bit binary key, set it and return true else just return false
	*/
 boolean setKey(String key) {
	if (key.length() == 64 && key.matches("[01]+")) {
	 this.key = key;
	 this.loadRegisters(key);
	 return true;
	}
	return false;
 }

 String getKey() {
	return this.key;
 }

 String encrypt(String plaintext) {
	StringBuilder s = new StringBuilder();
	int[] binary = this.toBinary(plaintext);
	int[] keystream = getKeystream(binary.length);
	for (int i = 0; i < binary.length; i++)
	 s.append(binary[i] ^ keystream[i]);
	return s.toString();
 }

 String decrypt(String ciphertext) {
	StringBuilder s = new StringBuilder();
	int[] binary = new int[ciphertext.length()];
	int[] keystream = getKeystream(ciphertext.length());
	for (int i = 0; i < binary.length; i++) {
	 binary[i] = Integer.parseInt(ciphertext.substring(i, i + 1));
	 s.append(binary[i] ^ keystream[i]);
	}
	return this.toStr(s.toString());
 }
 public String toStr(String binary) {
	StringBuilder s = new StringBuilder();
	for (int i = 0; i <= binary.length() - 8; i += 8)
	 s.append((char) Integer.parseInt(binary.substring(i, i + 8), 2));
	return s.toString();
 }

 int[] getKeystream(int length) {
	// 1. Instantiate registers and keystream
	int[] regX = this.regX.clone();
	int[] regY = this.regY.clone();
	int[] regZ = this.regZ.clone();
	int[] keystream = new int[length];
	// 2. Generate keystream bits
	for (int i = 0; i < length; i++) {
	 // 2a. Calculate maj(x8, y10 ,z10)â€‹
	 int maj = this.getMajority(regX[8] , regY[10] , regZ[10]);

	 // 2b. If necessary, step regX
	 if (regX[8] == maj) {
		int newStart = regX[13] ^ regX[16] ^ regX[17] ^ regX[18];
		int[] temp = regX.clone();
		for (int j = 1; j < regX.length; j++)
		 regX[j] = temp[j - 1];
		regX[0] = newStart;
	 }

	 // 2c. If necessary, step regY
	 if (regY[10] == maj) {
		int newStart = regY[20] ^ regY[21];
		int[] temp = regY.clone();
		for (int j = 1; j < regY.length; j++)
		 regY[j] = temp[j - 1];
		regY[0] = newStart;
	 }

	 // 2d. If necessary, step regZ
	 if (regZ[10] == maj) {
		int newStart = regZ[7] ^ regZ[20] ^ regZ[21] ^ regZ[22];
		int[] temp = regZ.clone();
		for (int j = 1; j < regZ.length; j++)
		 regZ[j] = temp[j - 1];
		regZ[0] = newStart;
	 }
	 keystream[i] = regX[18] ^ regY[21] ^ regZ[22];
	}
	return keystream;
 }

 private int getMajority(int x, int y, int z) {
	return x + y + z > 1 ? 1 : 0;
 }

 /**
	* Used to convert a string to binary values. Used by encrypt()
	*/
 public int[] toBinary(String text) {
	StringBuilder s = new StringBuilder();
	for (int i = 0; i < text.length(); i++) {
	 String temp = Integer.toBinaryString(text.charAt(i));
	 for (int j = temp.length(); j < 8; j++)
		temp = "0" + temp;
	 s.append(temp);
	}
	String binaryStr = s.toString();
	int[] binary = new int[binaryStr.length()];
	for (int i = 0; i < binary.length; i++)
	 binary[i] = Integer.parseInt(binaryStr.substring(i, i + 1));
	return binary;
 }
    /**
     * Creates new form GUI_A51
     */
    public GUI_A51() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txaCiphertext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaPlaintext = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        btnOpenfile = new javax.swing.JButton();
        btnGetkeystream = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtKey = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txaCiphertext.setColumns(20);
        txaCiphertext.setRows(5);
        jScrollPane1.setViewportView(txaCiphertext);

        txaPlaintext.setColumns(20);
        txaPlaintext.setRows(5);
        jScrollPane2.setViewportView(txaPlaintext);

        jLabel2.setText("Input a 64-bit key");

        btnEncrypt.setText("Encryption");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decryption");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnOpenfile.setText("Open file");
        btnOpenfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenfileActionPerformed(evt);
            }
        });

        btnGetkeystream.setText("Get key stream");
        btnGetkeystream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetkeystreamActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyActionPerformed(evt);
            }
        });

        btnClear.setText("CLear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnEncrypt, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                    .addComponent(btnOpenfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnGetkeystream, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(txtKey))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEncrypt)
                            .addComponent(btnDecrypt))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOpenfile)
                            .addComponent(btnGetkeystream))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit)
                            .addComponent(btnClear))))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        // TODO add your handling code here:
        while(getKey()==null){
        if(!setKey(txtKey.getText())){
            txaCiphertext.setText("Invalid key. Make sure input is a 64-bit binary value");
        }
        }
        String in;
        final String ANSI_RED = "\u001B[31m";
        final String ANSI_RESET = "\u001B[0m";
        in = txaPlaintext.getText();
        String result = ANSI_RED + "encrypt(" + in + ") = " + encrypt(in) +" "+ ANSI_RESET;
        txaCiphertext.append(result);
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        // TODO add your handling code here:
        txaPlaintext.setText("");
        txaCiphertext.setText("");
        txtKey.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed

        // TODO add your handling code here:
        System.exit(WIDTH);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed

        // TODO add your handling code here:
        while(getKey()==null){
        if(!setKey(txtKey.getText())){
            txaCiphertext.setText("Invalid key. Make sure input is a 64-bit binary value");
        }
        }
        String in;
        final String ANSI_RED = "\u001B[31m";
        final String ANSI_RESET = "\u001B[0m";
        in = txaPlaintext.getText();
        String result = ANSI_RED + "decrypt(" + in + ") = " + decrypt(in) +" "+ ANSI_RESET;
        txaCiphertext.append(result);
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnOpenfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenfileActionPerformed

        
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        
        try {
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            txaPlaintext.read(br, null);
            br.close();
            txaPlaintext.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
       
    }//GEN-LAST:event_btnOpenfileActionPerformed

    private void btnGetkeystreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetkeystreamActionPerformed

        // TODO add your handling code here:
        final String ANSI_RED = "\u001B[31m";
        final String ANSI_RESET = "\u001B[0m";
        txaPlaintext.setText(ANSI_RED + "keystream(64) = " + ANSI_RESET);
        for (int i : getKeystream(64)){
            txaCiphertext.setText(ANSI_RED + i +  ANSI_RESET);
        }
    }//GEN-LAST:event_btnGetkeystreamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_A51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_A51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_A51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_A51.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_A51().setVisible(true);
            }
        });
        
    

 
 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGetkeystream;
    private javax.swing.JButton btnOpenfile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txaCiphertext;
    private javax.swing.JTextArea txaPlaintext;
    private javax.swing.JTextField txtKey;
    // End of variables declaration//GEN-END:variables
}
